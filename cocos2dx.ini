[cocos2d-x]
# the prefix to be added to the generated functions. You might or might not use this in your own
# templates
prefix = autogencocos2dxbindings

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = cc

# extra arguments for clang
extra_arguments = -I../../cocos2dx/include -I../../cocos2dx/platform -I../../cocos2dx/platform/ios -I../../cocos2dx -I../../cocos2dx/kazmath/include -arch i386 -DTARGET_OS_IPHONE -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator5.1.sdk -x c++

# what headers to parse
headers = ../../cocos2dx/include/cocos2d.h

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^CCMenu*$".
classes = CCSprite.* CCScene CCNode CCDirector CCLabelTTF CCLayer.* CCMenu.* CCTouch CC.*Action.* CCMove.* CCRotate.* CCBlink.* CCTint.* CCSequence CCRepeat.* CCFade.* CCEase.* CCScale.* CCTransition.* CCSpawn CCSequence CCAnimation

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.
skip = CCNode::[.*Transform convertToWindowSpace .*(s|S)chedule.* getChildren getGrid setGLServerState description getActionManager getCamera getShaderProgram getUserObject],
		CCSprite::[getQuad displayFrame getTexture getBlendFunc setBlendFunc getTextureAtlas setSpriteBatchNode getSpriteBatchNode],
		CCDirector::[setProjection getAccelerometer getKeypadDispatcher getTouchDispatcher getActionManager setWatcherCallbackFun getOpenGLView getScheduler],
		CCLayer.*::[didAccelerate (g|s)etBlendFunc],
		CCMenu.*::[.*Target getSubItems create],
		CCMenuItem.*::[create],
		CCRGBAProtocol::[*],
		CCObject::[*],
		CCCopying::[*],
		CC.*Protocol::[*],
		CC.*Delegate::[*],
		CCPoolManager::[*],
		CCIMEDispatcher::[*],
		CCSAXParser::[*],
		CCCallFunc.*::[*],
		CCThread::[*],
		CCProfiler::[*],
		CCProfilingTimer::[*],
		CCSAXDelegator::[*],
		CCColor3bObject::[*],
		CCPlace::[*],
		CCTouchDispatcher::[*],
		EGLTouchDelegate::[*],
		CCScriptEngineManager::[*],
		CCKeypadHandler::[*],
		CCInvocation::[*],
		CCEGLView::[*],
		CCSchedulerScriptHandlerEntry::[*],
		CCSize::[*],
		CCPoint::[*],
		CCRect::[*],
		CCSize::[*],
		CCString::[*],
		CCDictionary::[*],
		CCArray::[*],
		CCSet::[*],
		CCRange::[*],
		CCNotificationObserver::[*],
		CCListView.*::[*],
		CCImage::[initWithString initWithImageData],
		CCSequence::[create],
		CCSpawn::[create],
		CC.*Grid3D.*::[*],
		*::[copy.* onEnter.* onExit.* description getObjectType .*RGB.* .*HSV.*]

rename = CCDirector::[sharedDirector=getInstance],
	CCSpriteFrameCache::[sharedSpriteFrameCache=getInstance]

# for all class names, should we remove something when registering in the target VM?
remove_prefix = CC

# objects for which there will be no "parent" lookup
base_objects = CCNode CCDirector

# classes that create no constructor
abstract_classes = CCDirector CCSpriteFrameCache CCTransitionEaseScene

# do the classes have type info?
# ClassName::OBJECT_TYPE // ~> uint32_t
# classInstance->getObjectType() // ~> returns the ClassName::OBJECT_TYPE
# FIXME: this is not working yet and it's assuming all classes implement object type
classes_have_type_info = yes
